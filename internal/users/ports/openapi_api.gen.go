// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package ports

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 用户登录
	// (POST /user/login)
	UserLogin(w http.ResponseWriter, r *http.Request)
	// 用户注销
	// (DELETE /user/logout)
	UserLogout(w http.ResponseWriter, r *http.Request)
	// 用户注册
	// (POST /user/register)
	UserRegister(w http.ResponseWriter, r *http.Request)
	// 用户申请注册
	// (POST /user/register/verify/email)
	UserApplyRegister(w http.ResponseWriter, r *http.Request, params UserApplyRegisterParams)
	// 获取用户信息
	// (GET /user/{uid})
	GetUserInfo(w http.ResponseWriter, r *http.Request, uid int)
	// 重置用户密码
	// (POST /user/{uid}/reset/pwd)
	ResetPassword(w http.ResponseWriter, r *http.Request, uid string)
	// 更新用户名
	// (PUT /user/{uid}/update/profile)
	ModifyUserName(w http.ResponseWriter, r *http.Request, uid string)
	// 更新用户权限
	// (PUT /user/{uid}/update/roles)
	ModifyUserRoles(w http.ResponseWriter, r *http.Request, uid string)
	// 用户验证
	// (POST /user/{uid}/verify)
	UserVerify(w http.ResponseWriter, r *http.Request, uid string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// 用户登录
// (POST /user/login)
func (_ Unimplemented) UserLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 用户注销
// (DELETE /user/logout)
func (_ Unimplemented) UserLogout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 用户注册
// (POST /user/register)
func (_ Unimplemented) UserRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 用户申请注册
// (POST /user/register/verify/email)
func (_ Unimplemented) UserApplyRegister(w http.ResponseWriter, r *http.Request, params UserApplyRegisterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 获取用户信息
// (GET /user/{uid})
func (_ Unimplemented) GetUserInfo(w http.ResponseWriter, r *http.Request, uid int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 重置用户密码
// (POST /user/{uid}/reset/pwd)
func (_ Unimplemented) ResetPassword(w http.ResponseWriter, r *http.Request, uid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 更新用户名
// (PUT /user/{uid}/update/profile)
func (_ Unimplemented) ModifyUserName(w http.ResponseWriter, r *http.Request, uid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 更新用户权限
// (PUT /user/{uid}/update/roles)
func (_ Unimplemented) ModifyUserRoles(w http.ResponseWriter, r *http.Request, uid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 用户验证
// (POST /user/{uid}/verify)
func (_ Unimplemented) UserVerify(w http.ResponseWriter, r *http.Request, uid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserLogout operation middleware
func (siw *ServerInterfaceWrapper) UserLogout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserApplyRegister operation middleware
func (siw *ServerInterfaceWrapper) UserApplyRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserApplyRegisterParams

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserApplyRegister(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid int

	err = runtime.BindStyledParameterWithOptions("simple", "uid", chi.URLParam(r, "uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetPassword operation middleware
func (siw *ServerInterfaceWrapper) ResetPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", chi.URLParam(r, "uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetPassword(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyUserName operation middleware
func (siw *ServerInterfaceWrapper) ModifyUserName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", chi.URLParam(r, "uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyUserName(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ModifyUserRoles operation middleware
func (siw *ServerInterfaceWrapper) ModifyUserRoles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", chi.URLParam(r, "uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyUserRoles(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserVerify operation middleware
func (siw *ServerInterfaceWrapper) UserVerify(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", chi.URLParam(r, "uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserVerify(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/login", wrapper.UserLogin)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/logout", wrapper.UserLogout)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/register", wrapper.UserRegister)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/register/verify/email", wrapper.UserApplyRegister)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{uid}", wrapper.GetUserInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/{uid}/reset/pwd", wrapper.ResetPassword)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/{uid}/update/profile", wrapper.ModifyUserName)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/{uid}/update/roles", wrapper.ModifyUserRoles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/{uid}/verify", wrapper.UserVerify)
	})

	return r
}
