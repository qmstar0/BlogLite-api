// Package httpserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package httpserver

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Category defines model for category.
type Category struct {
	Desc *string `json:"desc,omitempty"`
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Num  *int    `json:"num,omitempty"`
}

// Categorys defines model for categorys.
type Categorys struct {
	Count *int      `json:"count,omitempty"`
	Items *Category `json:"items,omitempty"`
}

// Post defines model for post.
type Post struct {
	Category  *Category `json:"category,omitempty"`
	Content   *string   `json:"content,omitempty"`
	CreatedAt *int      `json:"createdAt,omitempty"`
	Desc      *string   `json:"desc,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Tags      *[]string `json:"tags,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *int      `json:"updatedAt,omitempty"`
	Uri       *string   `json:"uri,omitempty"`
	Visible   *bool     `json:"visible,omitempty"`
}

// Posts defines model for posts.
type Posts struct {
	Count *int  `json:"count,omitempty"`
	Items *Post `json:"items,omitempty"`
	Page  *int  `json:"page,omitempty"`
}

// Tags defines model for tags.
type Tags struct {
	Count *int      `json:"count,omitempty"`
	Items *[]string `json:"items,omitempty"`
}

// GetApiPostsParams defines parameters for GetApiPosts.
type GetApiPostsParams struct {
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Tag      *string `form:"tag,omitempty" json:"tag,omitempty"`
	Category *uint32 `form:"category,omitempty" json:"category,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 全部分类
	// (GET /api/categorys)
	GetApiCategorys(c *gin.Context)
	// 帖子列表
	// (GET /api/posts)
	GetApiPosts(c *gin.Context, params GetApiPostsParams)
	// 帖子
	// (GET /api/posts/{id})
	GetApiPostsId(c *gin.Context, id uint32)
	// 全部标签
	// (GET /api/tags)
	GetApiTags(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiCategorys operation middleware
func (siw *ServerInterfaceWrapper) GetApiCategorys(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiCategorys(c)
}

// GetApiPosts operation middleware
func (siw *ServerInterfaceWrapper) GetApiPosts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiPostsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", c.Request.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiPosts(c, params)
}

// GetApiPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiPostsId(c, id)
}

// GetApiTags operation middleware
func (siw *ServerInterfaceWrapper) GetApiTags(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiTags(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/categorys", wrapper.GetApiCategorys)
	router.GET(options.BaseURL+"/api/posts", wrapper.GetApiPosts)
	router.GET(options.BaseURL+"/api/posts/:id", wrapper.GetApiPostsId)
	router.GET(options.BaseURL+"/api/tags", wrapper.GetApiTags)
}
